
// Generated from /home/wirewhiz/Documents/git/BraneEngine/libraries/internal/BraneScript/antlr4/brane.g4 by ANTLR 4.12.0


#include "braneLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct BraneLexerStaticData final {
  BraneLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BraneLexerStaticData(const BraneLexerStaticData&) = delete;
  BraneLexerStaticData(BraneLexerStaticData&&) = delete;
  BraneLexerStaticData& operator=(const BraneLexerStaticData&) = delete;
  BraneLexerStaticData& operator=(BraneLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag branelexerLexerOnceFlag;
BraneLexerStaticData *branelexerLexerStaticData = nullptr;

void branelexerLexerInitialize() {
  assert(branelexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BraneLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "NEWLINE", "COMMENT", "BLOCK_COMMENT", "SPACE", 
      "BOOL", "INT", "FLOAT", "CHAR", "STRING", "ID", "MUL", "DIV", "ADD", 
      "SUB", "LOGIC"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "';'", "'type'", "'...'", "'template'", "'<'", "','", "'>'", "'::'", 
      "'const'", "'ref'", "'opr'", "'=='", "'!='", "'<='", "'>='", "'[]'", 
      "'('", "')'", "'ext'", "'{'", "'}'", "'link'", "'as'", "'export as'", 
      "'packed'", "'struct'", "'='", "'return'", "'if'", "'else'", "'while'", 
      "'unroll'", "'.'", "'['", "']'", "", "", "", "", "", "", "", "", "", 
      "", "'*'", "'/'", "'+'", "'-'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "NEWLINE", "COMMENT", "BLOCK_COMMENT", "SPACE", "BOOL", "INT", 
      "FLOAT", "CHAR", "STRING", "ID", "MUL", "DIV", "ADD", "SUB", "LOGIC"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,50,339,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
  	12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,
  	18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,
  	22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
  	29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	32,1,32,1,33,1,33,1,34,1,34,1,35,4,35,241,8,35,11,35,12,35,242,1,35,1,
  	35,1,36,1,36,1,36,1,36,5,36,251,8,36,10,36,12,36,254,9,36,1,36,1,36,1,
  	36,1,36,1,37,1,37,1,37,1,37,5,37,264,8,37,10,37,12,37,267,9,37,1,37,1,
  	37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	39,1,39,1,39,3,39,287,8,39,1,40,4,40,290,8,40,11,40,12,40,291,1,41,1,
  	41,1,41,5,41,297,8,41,10,41,12,41,300,9,41,3,41,302,8,41,1,41,1,41,1,
  	42,1,42,1,42,1,42,1,43,1,43,5,43,312,8,43,10,43,12,43,315,9,43,1,43,1,
  	43,1,44,1,44,5,44,321,8,44,10,44,12,44,324,9,44,1,45,1,45,1,46,1,46,1,
  	47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,3,49,338,8,49,3,252,265,313,0,50,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,1,0,6,2,0,10,10,13,13,5,0,10,10,13,13,40,41,69,70,79,79,2,0,
  	9,9,32,32,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
  	348,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
  	0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,108,1,0,0,0,7,
  	112,1,0,0,0,9,121,1,0,0,0,11,123,1,0,0,0,13,125,1,0,0,0,15,127,1,0,0,
  	0,17,130,1,0,0,0,19,136,1,0,0,0,21,140,1,0,0,0,23,144,1,0,0,0,25,147,
  	1,0,0,0,27,150,1,0,0,0,29,153,1,0,0,0,31,156,1,0,0,0,33,159,1,0,0,0,35,
  	161,1,0,0,0,37,163,1,0,0,0,39,167,1,0,0,0,41,169,1,0,0,0,43,171,1,0,0,
  	0,45,176,1,0,0,0,47,179,1,0,0,0,49,189,1,0,0,0,51,196,1,0,0,0,53,203,
  	1,0,0,0,55,205,1,0,0,0,57,212,1,0,0,0,59,215,1,0,0,0,61,220,1,0,0,0,63,
  	226,1,0,0,0,65,233,1,0,0,0,67,235,1,0,0,0,69,237,1,0,0,0,71,240,1,0,0,
  	0,73,246,1,0,0,0,75,259,1,0,0,0,77,273,1,0,0,0,79,286,1,0,0,0,81,289,
  	1,0,0,0,83,293,1,0,0,0,85,305,1,0,0,0,87,309,1,0,0,0,89,318,1,0,0,0,91,
  	325,1,0,0,0,93,327,1,0,0,0,95,329,1,0,0,0,97,331,1,0,0,0,99,337,1,0,0,
  	0,101,102,5,59,0,0,102,2,1,0,0,0,103,104,5,116,0,0,104,105,5,121,0,0,
  	105,106,5,112,0,0,106,107,5,101,0,0,107,4,1,0,0,0,108,109,5,46,0,0,109,
  	110,5,46,0,0,110,111,5,46,0,0,111,6,1,0,0,0,112,113,5,116,0,0,113,114,
  	5,101,0,0,114,115,5,109,0,0,115,116,5,112,0,0,116,117,5,108,0,0,117,118,
  	5,97,0,0,118,119,5,116,0,0,119,120,5,101,0,0,120,8,1,0,0,0,121,122,5,
  	60,0,0,122,10,1,0,0,0,123,124,5,44,0,0,124,12,1,0,0,0,125,126,5,62,0,
  	0,126,14,1,0,0,0,127,128,5,58,0,0,128,129,5,58,0,0,129,16,1,0,0,0,130,
  	131,5,99,0,0,131,132,5,111,0,0,132,133,5,110,0,0,133,134,5,115,0,0,134,
  	135,5,116,0,0,135,18,1,0,0,0,136,137,5,114,0,0,137,138,5,101,0,0,138,
  	139,5,102,0,0,139,20,1,0,0,0,140,141,5,111,0,0,141,142,5,112,0,0,142,
  	143,5,114,0,0,143,22,1,0,0,0,144,145,5,61,0,0,145,146,5,61,0,0,146,24,
  	1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,26,1,0,0,0,150,151,5,60,
  	0,0,151,152,5,61,0,0,152,28,1,0,0,0,153,154,5,62,0,0,154,155,5,61,0,0,
  	155,30,1,0,0,0,156,157,5,91,0,0,157,158,5,93,0,0,158,32,1,0,0,0,159,160,
  	5,40,0,0,160,34,1,0,0,0,161,162,5,41,0,0,162,36,1,0,0,0,163,164,5,101,
  	0,0,164,165,5,120,0,0,165,166,5,116,0,0,166,38,1,0,0,0,167,168,5,123,
  	0,0,168,40,1,0,0,0,169,170,5,125,0,0,170,42,1,0,0,0,171,172,5,108,0,0,
  	172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,107,0,0,175,44,1,0,0,0,
  	176,177,5,97,0,0,177,178,5,115,0,0,178,46,1,0,0,0,179,180,5,101,0,0,180,
  	181,5,120,0,0,181,182,5,112,0,0,182,183,5,111,0,0,183,184,5,114,0,0,184,
  	185,5,116,0,0,185,186,5,32,0,0,186,187,5,97,0,0,187,188,5,115,0,0,188,
  	48,1,0,0,0,189,190,5,112,0,0,190,191,5,97,0,0,191,192,5,99,0,0,192,193,
  	5,107,0,0,193,194,5,101,0,0,194,195,5,100,0,0,195,50,1,0,0,0,196,197,
  	5,115,0,0,197,198,5,116,0,0,198,199,5,114,0,0,199,200,5,117,0,0,200,201,
  	5,99,0,0,201,202,5,116,0,0,202,52,1,0,0,0,203,204,5,61,0,0,204,54,1,0,
  	0,0,205,206,5,114,0,0,206,207,5,101,0,0,207,208,5,116,0,0,208,209,5,117,
  	0,0,209,210,5,114,0,0,210,211,5,110,0,0,211,56,1,0,0,0,212,213,5,105,
  	0,0,213,214,5,102,0,0,214,58,1,0,0,0,215,216,5,101,0,0,216,217,5,108,
  	0,0,217,218,5,115,0,0,218,219,5,101,0,0,219,60,1,0,0,0,220,221,5,119,
  	0,0,221,222,5,104,0,0,222,223,5,105,0,0,223,224,5,108,0,0,224,225,5,101,
  	0,0,225,62,1,0,0,0,226,227,5,117,0,0,227,228,5,110,0,0,228,229,5,114,
  	0,0,229,230,5,111,0,0,230,231,5,108,0,0,231,232,5,108,0,0,232,64,1,0,
  	0,0,233,234,5,46,0,0,234,66,1,0,0,0,235,236,5,91,0,0,236,68,1,0,0,0,237,
  	238,5,93,0,0,238,70,1,0,0,0,239,241,7,0,0,0,240,239,1,0,0,0,241,242,1,
  	0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,6,35,0,
  	0,245,72,1,0,0,0,246,247,5,47,0,0,247,248,5,47,0,0,248,252,1,0,0,0,249,
  	251,9,0,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,253,1,0,0,0,252,250,1,
  	0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,7,1,0,0,256,257,1,0,0,0,
  	257,258,6,36,0,0,258,74,1,0,0,0,259,260,5,47,0,0,260,261,5,42,0,0,261,
  	265,1,0,0,0,262,264,9,0,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,266,1,
  	0,0,0,265,263,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,42,0,
  	0,269,270,5,47,0,0,270,271,1,0,0,0,271,272,6,37,0,0,272,76,1,0,0,0,273,
  	274,7,2,0,0,274,275,1,0,0,0,275,276,6,38,0,0,276,78,1,0,0,0,277,278,5,
  	116,0,0,278,279,5,114,0,0,279,280,5,117,0,0,280,287,5,101,0,0,281,282,
  	5,102,0,0,282,283,5,97,0,0,283,284,5,108,0,0,284,285,5,115,0,0,285,287,
  	5,101,0,0,286,277,1,0,0,0,286,281,1,0,0,0,287,80,1,0,0,0,288,290,7,3,
  	0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,
  	82,1,0,0,0,293,301,3,81,40,0,294,298,5,46,0,0,295,297,7,3,0,0,296,295,
  	1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,302,1,0,0,
  	0,300,298,1,0,0,0,301,294,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,
  	304,5,102,0,0,304,84,1,0,0,0,305,306,5,39,0,0,306,307,9,0,0,0,307,308,
  	5,39,0,0,308,86,1,0,0,0,309,313,5,34,0,0,310,312,9,0,0,0,311,310,1,0,
  	0,0,312,315,1,0,0,0,313,314,1,0,0,0,313,311,1,0,0,0,314,316,1,0,0,0,315,
  	313,1,0,0,0,316,317,5,34,0,0,317,88,1,0,0,0,318,322,7,4,0,0,319,321,7,
  	5,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,
  	323,90,1,0,0,0,324,322,1,0,0,0,325,326,5,42,0,0,326,92,1,0,0,0,327,328,
  	5,47,0,0,328,94,1,0,0,0,329,330,5,43,0,0,330,96,1,0,0,0,331,332,5,45,
  	0,0,332,98,1,0,0,0,333,334,5,38,0,0,334,338,5,38,0,0,335,336,5,124,0,
  	0,336,338,5,124,0,0,337,333,1,0,0,0,337,335,1,0,0,0,338,100,1,0,0,0,11,
  	0,242,252,265,286,291,298,301,313,322,337,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  branelexerLexerStaticData = staticData.release();
}

}

braneLexer::braneLexer(CharStream *input) : Lexer(input) {
  braneLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *branelexerLexerStaticData->atn, branelexerLexerStaticData->decisionToDFA, branelexerLexerStaticData->sharedContextCache);
}

braneLexer::~braneLexer() {
  delete _interpreter;
}

std::string braneLexer::getGrammarFileName() const {
  return "brane.g4";
}

const std::vector<std::string>& braneLexer::getRuleNames() const {
  return branelexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& braneLexer::getChannelNames() const {
  return branelexerLexerStaticData->channelNames;
}

const std::vector<std::string>& braneLexer::getModeNames() const {
  return branelexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& braneLexer::getVocabulary() const {
  return branelexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView braneLexer::getSerializedATN() const {
  return branelexerLexerStaticData->serializedATN;
}

const atn::ATN& braneLexer::getATN() const {
  return *branelexerLexerStaticData->atn;
}




void braneLexer::initialize() {
  ::antlr4::internal::call_once(branelexerLexerOnceFlag, branelexerLexerInitialize);
}
