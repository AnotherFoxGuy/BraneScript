module "vector"
link "nativeConstructors"
link "unsafe"
{
    template<typedef T>
    struct Vector
    {
        ref[] T _data;
        uint _size;
        uint _allocSize;
        void _grow(uint minSize)
        {
            if (_allocSize >= minSize)
                return;
            if(minSize <= _allocSize)
                return;

            uint newSize = minSize * 1.5f;
            ref[] T newData <- (ref[] T)malloc(newSize * sizeof(T));
            for(uint i = 0; i < _size; i++)
            {
                _construct(newData[i]);
                _move(newData[i], _data[i]);
                _destruct(_data[i]);
            }
            if(_allocSize > 0)
                free(_data);
            _data <- newData;
            _allocSize = newSize;
        }
        void _construct()
        {
            _size = 0;
            _allocSize = 0;
        }
        void _copy(const ref Vector<T> other)
        {
            for(uint i = 0; i < _size; i++)
                _destruct(_data[i]);
            if(_allocSize < other._size)
            {
                if(_allocSize > 0)
                    free(_data);
                _data <- (ref[] T)malloc(other._allocSize * sizeof(T));
                _allocSize = other._allocSize;
                for(uint i = 0; i < other._size; i++)
                    _construct(_data[i]);
            }
            for(uint i = 0; i < other._size; i++)
                _copy(_data[i], other._data[i]);
            _size = other._size;
        }
        void _move(ref Vector<T> other)
        {
             for(uint i = 0; i < _size; i++)
                _destruct(_data[i]);
            _size = other._size;
            _allocSize = other._allocSize;
            _data <- other._data;
            other._size = 0;
            other._allocSize = 0;
        }
        void _destruct()
        {
            if (_allocSize > 0)
            {
                for(uint i = 0; i < _size; i++)
                    _destruct(_data[i]);
                free(_data);
            }
        }
        uint size()
        {
            return _size;
        }
        void resize(uint newSize)
        {
            _grow(newSize);
            for(uint i = _size; i < newSize; i++)
                _construct(_data[i]);
            for(uint i = newSize; i < _size; i++)
                _destruct(_data[i]);
            _size = newSize;
        }
        void append(const ref T value)
        {
            _grow(_size + 1);
            _construct(_data[_size]);
            _copy(_data[_size], value);
            _size++;
        }
        void clear()
        {
            for(uint i = 0; i < _size; i++)
                _destruct(_data[i]);
            if(_allocSize > 0)
                free(_data);
            _allocSize = 0;
            _size = 0;
        }
        void remove(uint index)
        {
            _destruct(_data[index]);
            for(uint i = index; i < _size - 1; i++)
                _move(_data[i], _data[i + 1]);
            _size--;
        }
        ref T opr [](uint index)
        {
            return _data[index];
        }
    }
}