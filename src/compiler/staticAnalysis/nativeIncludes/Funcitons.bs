module "lambda"
link "unsafe"
{
    template<typedef Ret, typedef... T>
    struct Lambda
    {
        ref void _data;
        FuncRef<Ret, ref void, T...> _f;
        FuncRef<void, ref void> _dataDestructor;
        FuncRef<void, ref void, const ref void> _dataCopyConstructor;
        uint _dataSize;
        Ret opr ()(T... args)
        {
            return _f(_data, args...);
        }
        void _construct()
        {
            _dataSize = 0;
        }
        void _destruct()
        {
            if(_dataSize != 0)
            {
                _dataDestructor(_data);
                free(_data);
            }
        }
        void _copy(const ref Lambda<Ret, T...> other)
        {
            if(_dataSize != 0)
                _dataDestructor(_data);
            if(_dataSize != other._dataSize)
            {
                if(_dataSize != 0)
                    free(_data);
                if(other._dataSize != 0)
                {
                    _data <- malloc(other._dataSize);
                    other._dataCopyConstructor(_data, other._data);
                    _dataDestructor = other._dataDestructor;
                    _dataCopyConstructor = other._dataCopyConstructor;
                }
            }
            _dataSize = other._dataSize;
            _f = other._f;
        }
        void _move(ref Lambda<Ret, T...> other)
        {
            _data <- other._data;
            _dataDestructor = other._dataDestructor;
            _dataCopyConstructor = other._dataCopyConstructor;
            _f = other._f;
            _dataSize = other._dataSize;
            other._dataSize = 0;
        }

        template<typedef CaptureStruct>
        void _allocCaptureData()
        {
            _dataSize = sizeof(CaptureStruct);
            _data <- malloc(_dataSize);
            CaptureStruct::_construct((ref CaptureStruct)_data);
        }
    }
}