module "tests"
{
    FuncRef<int, int> globalFunc;

    void setGlobalFuncExt(FuncRef<int, int> func)
    {
        globalFunc = func;
    }

    FuncRef<int, int> getGlobalFunc()
    {
        return globalFunc;
    }

    int callGlobalFunc(int value)
    {
        return globalFunc(value);
    }

    // Add multiple functions with the same name, to test function pointer selection
    float addOne(float value)
    {
        return value + 1.0f;
    }

    int addOne(int value)
    {
        return value + 1;
    }

    void setGlobalFuncLoc()
    {
        globalFunc = addOne;
    }

    struct TestStruct
    {
        int value;
    }

    TestStruct getStruct(int value)
    {
        TestStruct testStruct;
        testStruct.value = value;
        return testStruct;
    }

    int testStructRet()
    {
        FuncRef<TestStruct, int> func = getStruct;
        TestStruct testStruct = func(5);
        return testStruct.value;
    }
}