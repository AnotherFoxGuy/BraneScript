module "tests"
{
    template<typedef Arg1, typedef Arg2>
    Arg1 add(Arg1 a, Arg2 b)
    {
        return a + b;
    }

    int addIntExplicit(int a, int b)
    {
        return add<int, int>(a, b);
    }

    int addIntExplicit2(int a, int b)
    {
        return add<int, int>(a, b) + add<int, int>(a, b);
    }

    float addFloatExplicit(float a, float b)
    {
        return add<float, float>(a, b);
    }

    template<typedef T1, typedef T2>
    struct TestPair
    {
        T1 first;
        T2 second;
    }

    TestPair<int, float> generatePair(int a, float b)
    {
        TestPair<int, float> output;
        output.first = a;
        output.second = b;
        return output;
    }

    template<typedef T, typedef... Args>
    T sumRecursive(T value, Args... args)
    {
        if(sizeof...(Args) != 0)
            return value + sumRecursive<Args...>(args...);
        return value;
    }

    int sum4(int v1, int v2, int v3, int v4)
    {
        return sumRecursive<int, int, int, int>(v1, v2, v3, v4);
    }

    template<int i>
    int sumTemplate()
    {
        if(i > 1)
            return i + sumTemplate<i - 1>();
        return 1;
    }

    int testTemplateExprArg()
    {
        return sumTemplate<6>();
    }
}